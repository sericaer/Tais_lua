INIT_SELECT = {}

BACKGROUND_DEF = {
    init_func = function(self)
         for key,value in pairs(self) do
            if type(value) == 'table' then
                value.name = key
            end
        end
    end
}

POP_DEF = {
    init_func = function(self)
        for key,value in pairs(self) do
            if type(value) == 'table' then
                value.name = key
                value.new = function(self, num)
                    local lookup_table = {}
                    local function copyObj( self )
                        if type( self ) ~= "table" then
                            return self
                        elseif lookup_table[self] then
                            return lookup_table[self]
                        end
                        
                        local new_table = {}
                        lookup_table[self] = new_table
                        for key, value in pairs( self ) do
                            new_table[copyObj( key )] = copyObj( value )
                        end
                        return setmetatable( new_table, getmetatable( self ) )
                    end
                    local rslt = copyObj( self )
                    rslt.num = num
                    return rslt
                end
            end
        end
    end
}

DEPART_DEF = {
    init_table = function (self)
        for key,value in pairs(self) do
            if type(value) == "table" then
                value.name = key
            end
        end
    end
}

EVENT_DEF = 
{
    DEPART = {},
    GLOBAL = {},
    POP = {},

    init_func = function(self)
        for key,value in pairs(self) do
            if key == 'DEPART' or key == 'GLOBAL' or key == 'POP' then
                for key_e, value_e in pairs(value) do
                    if type(value_e) == 'table' then
                        value_e.name = key_e
                        if(value_e['hide'] == nil) then
                            value_e.hide = false
                        end
                        if(value_e['title'] == nil) then
                            value_e.title = function (self)
                                return self.name.."_TITLE"
                            end
                        end
                        if(value_e['desc'] == nil) then
                            value_e.desc = function (self)
                                return self.name.."_DESC"
                            end
                        end
                        for keyO,valueO in pairs(value_e['options']) do
                            if(valueO['desc'] == nil) then
                                valueO.desc = function (self)
                                    return value_e.name.."_"..keyO.."_DESC"
                                end
                            end
                            if(valueO['next_event'] == nil) then
                                valueO.next_event = function (self)
                                    return ''
                                end
                            end
                        end
                    end
                end
            end
        end
    end
}

BUFFER_DEF = 
{
    DEPART = {},
    POP = {},
    init_func = function(self)
        for key,value in pairs(self) do
            if key == 'DEPART' or key == 'POP' then
                for key_e, value_e in pairs(value) do
                    if type(value_e) == 'table' then
                        value_e.name = key_e
                        if(value_e['group'] == nil) then
                            value_e.group = ''
                        end
                    end
                end
            end
        end
    end
}

TASK_DEF = 
{
    init_func = function(self)
        for key,value in pairs(self) do
            if type(value) == 'table' then
                value.name = key
            end
        end
    end
}

init_data = function ()
    return CS.TaisEngine.InitData.inst
end

gm_data = function ()
    return CS.TaisEngine.ToLua.inst
end

gm_depart = function()
    return CS.TaisEngine.ToLua.curr_depart
end

gm_pop = function()
    return CS.TaisEngine.ToLua.curr_pop
end